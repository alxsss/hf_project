<?php
// auto-generated by sfPropelCrud
// date: 2008/05/28 05:50:45
?>
<?php
/**
 * editPlaylist actions.
 *
 * @package    fmpsv
 * @subpackage editPlaylist
 * @author     Your name here
 * @version    SVN: $Id: actions.class.php 3335 2007-01-23 16:19:56Z fabien $
 */
 
class editPlaylistActions extends sfActions
{
  public function executeIndex()
  {
    return $this->forward('editPlaylist', 'list');
  }
  public function executeList()
  {
    $this->playlist_musics = PlaylistMusicPeer::doSelect(new Criteria());
  }
  public function executeShow()
  {
    $this->playlist_id=$this->getRequestParameter('playlist_id');
	$this->playlist_music = PlaylistMusicPeer::retrieveByOnePk($this->playlist_id);
	$this->playlist=PlaylistPeer::retrieveByPk($this->playlist_id);
    $this->forward404Unless($this->playlist);
	$this->user_id=$this->getUser()->getAttribute('user_id', '', 'sfGuardSecurityUser');
  }
  public function executeGenerate()
  {
    $this->playlist_id=$this->getRequestParameter('playlist_id');
	$this->playlist_music = PlaylistMusicPeer::retrieveByOnePk($this->playlist_id);
	$this->playlist=PlaylistPeer::retrieveByPk($this->playlist_id);
	$this->forward404Unless($this->playlist);
	$this->user_id=$this->getUser()->getAttribute('user_id', '', 'sfGuardSecurityUser');
  }
  
  public function executeGenerateembed()
  {
    $this->playlist_id=$this->getRequestParameter('playlist_id');
	$this->playlist_music = PlaylistMusicPeer::retrieveByOnePk($this->playlist_id);
	$this->playlist=PlaylistPeer::retrieveByPk($this->playlist_id);
	$this->forward404Unless($this->playlist);
	$this->user_id=$this->getUser()->getAttribute('user_id', '', 'sfGuardSecurityUser');
  }
  public function executeShow1()
  {
    $this->playlist_music = PlaylistMusicPeer::retrieveByPk($this->getRequestParameter('playlist_id'),
                      $this->getRequestParameter('music_id'));
    $this->forward404Unless($this->playlist_music);
  }
  public function executeCreate()
  {
    $this->playlist_music = new PlaylistMusic();
    $this->setTemplate('edit');
  }
  public function executeEdit()
  {
    $this->playlist_music = PlaylistMusicPeer::retrieveByPk($this->getRequestParameter('playlist_id'), $this->getRequestParameter('music_id'));
    $this->forward404Unless($this->playlist_music);	
  }
  public function executeUpdate()
  {
    if ((!$this->getRequestParameter('playlist_id'))&&(!$this->getRequestParameter('song_url')))
    {
       //$this->forward404Unless();
	   return $this->redirect('playlist/list');	  
    }
	//if there is music_id, it means a user tries to add from another playlist
    elseif (($this->getRequestParameter('playlist_id'))&&($this->getRequestParameter('music_id')))
	{
	  $music_id=$this->getRequestParameter('music_id');
    }
	else
    { 
	  $c=new Criteria();
	  $c->add(MusicPeer::URL, $this->getRequestParameter('song_url'));
	  $c->add(MusicPeer::TITLE, $this->getRequestParameter('song_title'));
	  $music=MusicPeer::doSelectOne($c);
	  if(!empty($music))
	  {
	    $music_id=$music->getId();
	  }
	  else
	  {
	    $music=new Music();
		$music->setUrl($this->getRequestParameter('song_url'));
		$music->setTitle($this->getRequestParameter('song_title'));
		$music->setArtist($this->getRequestParameter('artist'));
		//put admins id since we need an id. otherwise code gives error
		$music->setUserId(1);
		$music->save();
		$music_id=$music->getId();
	  }
	}
	//check if this record already exists
	$playlist_music = PlaylistMusicPeer::retrieveByPk($this->getRequestParameter('playlist_id'), $music_id);
	if(!$playlist_music)
	{ 
	  $playlist_music = new PlaylistMusic();
      $playlist_music->setPlaylistId($this->getRequestParameter('playlist_id'));
	  $playlist_music->setMusicId($music_id);
      $playlist_music->save();
	}
    return $this->redirect('editPlaylist/show?playlist_id='.$playlist_music->getPlaylistId());	 
  }
  public function executeUpdate1()
  {
    if (!$this->getRequestParameter('playlist_id')|| !$this->getRequestParameter('music_id'))
    {
      $playlist_music = new PlaylistMusic();
    }
    else
    {
      $playlist_music = PlaylistMusicPeer::retrieveByPk($this->getRequestParameter('playlist_id'), $this->getRequestParameter('music_id'));
      $this->forward404Unless($playlist_music);
    }
    $playlist_music->setPlaylistId($this->getRequestParameter('playlist_id') ? $this->getRequestParameter('playlist_id') : null);
    $playlist_music->setMusicId($this->getRequestParameter('music_id') ? $this->getRequestParameter('music_id') : null);
    $playlist_music->save();
    return $this->redirect('editPlaylist/show?playlist_id='.$playlist_music->getPlaylistId().'&music_id='.$playlist_music->getMusicId());
  }
  public function executeDelete()
  {
    $playlist_music = PlaylistMusicPeer::retrieveByPk($this->getRequestParameter('playlist_id'), $this->getRequestParameter('music_id'));
    $this->forward404Unless($playlist_music);
    $playlist_music->delete();
    //return $this->redirect('editPlaylist/list');
	return $this->redirect('editPlaylist/show?playlist_id='.$this->getRequestParameter('playlist_id'));
  }
  
  public function executeAddComment()
  {
   if ($this->getRequest()->getMethod() == sfRequest::POST)
   {
    if (!$this->getRequestParameter('body'))
    {
      return sfView::NONE;
    }
    $this->playlist = PlaylistPeer::retrieveByPk($this->getRequestParameter('playlist_id'));
    $this->forward404Unless($this->playlist);
 
    if($this->getUser()->isAuthenticated())
	{
	  $userid= $this->getUser()->getSubscriberId();
	 }
	 else
	 {
	   return $this->forward('sfGuardAuth','signin');
	 }	 
    // create answer
    $this->comment = new PlaylistComment();
    $this->comment->setPlaylist($this->playlist);
    $this->comment->setBody($this->getRequestParameter('body'));
    $this->comment->setUserId($userid);
    $this->comment->save();
    return sfView::SUCCESS;
   }
 
   $this->forward404();
  }
}
