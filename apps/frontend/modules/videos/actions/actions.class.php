<?php
// auto-generated by sfPropelCrud
// date: 2008/04/15 09:05:31
?>
<?php
/**
 * videos actions.
 *
 * @package    fmpsv
 * @subpackage videos
 * @author     Your name here
 * @version    SVN: $Id: actions.class.php 3335 2007-01-23 16:19:56Z fabien $
 */
class videosActions extends sfActions
{
  public function executeIndex()
  {
    //return $this->forward('videos', 'list');
   /*
    $yt = new Zend_Gdata_YouTube();
    $query = $yt->newVideoQuery();
    $query->setQuery('');
    $query->setStartIndex(1);
    $query->setMaxResults(10);
    $query->setFeedType('recently featured');
    $this->most_recent_feed = $yt->getVideoFeed($query);
   */
    $page=$this->getRequestParameter('page', 1);
    //$this->last_viewed_videos_pager = VideolistYtvideoPeer::getLastViewedVideosPager($page);
    $this->last_viewed_videos_pager =RecentYtvideoPeer::getRecentYtvideoPager($page);
  }
  public function executeIndexpage()
  {
    $page=$this->getRequestParameter('page', 1);
    $this->last_viewed_videos_pager =RecentYtvideoPeer::getRecentYtvideoPager($page);
  }

  public function executeMostviewed()
  {
    $yt = new Zend_Gdata_YouTube();
    $query = $yt->newVideoQuery();
    $query->setQuery('');
    $query->setStartIndex(1);
    $query->setMaxResults(10);
    $query->setFeedType('most viewed');
    $query->setTime('this_week');
    $this->most_viewed_feed = $yt->getVideoFeed($query);
  }
  public function executePlayvideo(sfWebRequest $request)
  {
    $this->video_id=$request->getParameter('video_id');
    //record played video in recent_ytvideo table once
    if($this->video_id)
    {
      $c=new Criteria();
      $c->add(RecentYtvideoPeer::YTVIDEO_ID, $this->video_id);
      $ytvideo=RecentYtvideoPeer::doSelectOne($c);
      if(empty($ytvideo))
      {
        $ytvideo=new RecentYtvideo();
        $ytvideo->setYtvideoId($this->video_id);
      }
      else
      {
        $ytvideo->setCreatedAt(time());
      }
      $ytvideo->save();
    }
  }
  public function executeNovideo(sfWebRequest $request)
  {
   
  }
  public function executeSearch(sfWebRequest $request)
  {
    $this->page = ($request->getParameter('page')) ? $request->getParameter('page'):1;
    $yt = new Zend_Gdata_YouTube();
    $searchTerm = $request->getParameter('query');
    //$startIndex = 1;//$_POST['startIndex'];
    $maxResults =10;// $_POST['maxResults'];
    $startIndex = ($this->page - 1) * $maxResults + 1;  
    $query = $yt->newVideoQuery();
    $query->setQuery($searchTerm);
    $query->setStartIndex($startIndex);
    $query->setMaxResults($maxResults);
    $this->video_feed = $yt->getVideoFeed($query);
    $nbResults= $this->video_feed->getTotalResults()->getText();
    $this->query=urlencode(trim($searchTerm));
    $this->feed_pager = new sfFeedPager('Feed', sfConfig::get('app_pager_video_max'), $nbResults);  
    $this->feed_pager->setPage($this->page);
    $this->feed_pager->init();
  }
  public function executeSearchajax(sfWebRequest $request)
  {
    $this->page = ($request->getParameter('page')) ? $request->getParameter('page'):1;
    $yt = new Zend_Gdata_YouTube();
    $searchTerm = $request->getParameter('query');
    //$startIndex = 1;//$_POST['startIndex'];
    $maxResults =10;// $_POST['maxResults'];
    $startIndex = ($this->page - 1) * $maxResults + 1;  
    $query = $yt->newVideoQuery();
    $query->setQuery($searchTerm);
    $query->setStartIndex($startIndex);
    $query->setMaxResults($maxResults);
    $this->video_feed = $yt->getVideoFeed($query);
    $nbResults= $this->video_feed->getTotalResults()->getText();
    $this->query=urlencode(trim($searchTerm));
    $this->feed_pager = new sfFeedPager('Feed', sfConfig::get('app_pager_video_max'), $nbResults);  
    $this->feed_pager->setPage($this->page);
    $this->feed_pager->init();
  }
  public function executeRefresh($request)
  {
    $this->video_id=$request->getParameter('video_id');
	$yt = new Zend_Gdata_YouTube();
    $entry = $yt->getVideoEntry($this->video_id);
	//$this->thumbnailUrl = $entry->mediaGroup->thumbnail[0]->url;
    //$this->videoTitle = $entry->mediaGroup->title;
    $this->videoUrl =$this->findFlashUrl($entry);
	
	$this->button_number=$request->getParameter('button_number');
	$this->play=$request->getParameter('play');
	//$this->getUser()->setAttribute('previous_button_number', $this->button_number);
  }
 public function findFlashUrl($entry) 
{
    foreach ($entry->mediaGroup->content as $content) {
        if ($content->type === 'application/x-shockwave-flash') {
            return $content->url;
        }
    }
    return null;
}
  public function executeList () 
   { 
   // $this->videos_pager = VideoPeer::getHomepagePager($this->getRequestParameter('page', 1));
	$c=new Criteria();
	$c->addDescendingOrderByColumn(VideoPeer::CREATED_AT);
    $this->videos = VideoPeer::doSelect($c); 
   }
  public function executeShow()
  {
    /*$this->video = VideoPeer::retrieveByPK($this->getRequestParameter('id'));
    $this->videos_pager = VideoPeer::getHomepagePager($this->getRequestParameter('page', 1)); 
    $this->forward404Unless($this->video);*/
	$c=new Criteria();
	$c->addDescendingOrderByColumn(VideoPeer::CREATED_AT);
    $this->videos = VideoPeer::doSelect($c);
  }
  public function executeAddCommentVideo()
  {
    if ($this->getRequest()->getMethod() == sfRequest::POST)
    {
      if (!$this->getRequestParameter('body'))
      {
        return sfView::NONE;
      }
 
    $this->videos = VideoPeer::retrieveByPk($this->getRequestParameter('videos_id'));
    $this->forward404Unless($this->videos);
 
    if($this->getUser()->isAuthenticated())
    {
	  $userid= $this->getUser()->getSubscriberId();
	}
	else
	{
	  return $this->forward('sfGuardAuth','signin');
	}	 
 
    // create answer
    $this->comment = new VideoComment();
    $this->comment->setVideo($this->videos);
    $this->comment->setBody($this->getRequestParameter('body'));
    $this->comment->setUserId($userid);
    $this->comment->save();
 
     return sfView::SUCCESS;
    }
    $this->forward404();
  }
  public function executeRecent()
   {
    $this->videos_pager = VideoPeer::getRecentPager($this->getRequestParameter('page', 1));
   }  
  public function executeCreate()
  {
    $this->videos = new Video();

    $this->setTemplate('edit');
  }

  public function executeEdit()
  {
    $this->videos = VideoPeer::retrieveByPk($this->getRequestParameter('id'));
    $this->forward404Unless($this->videos);
  }

  public function executeUpdate()
  {
    if (!$this->getRequestParameter('id'))
    {
      $videos = new Video();
    }
    else
    {
      $videos = VideoPeer::retrieveByPk($this->getRequestParameter('id'));
      $this->forward404Unless($videos);
    }

    $videos->setId($this->getRequestParameter('id'));
    $videos->setFilename($this->getRequestParameter('filename'));
    $videos->setHits($this->getRequestParameter('hits'));
    $videos->setCtime($this->getRequestParameter('ctime'));
    $videos->setUserId($this->getRequestParameter('user_id') ? $this->getRequestParameter('user_id') : null);
    $videos->setVideosRating($this->getRequestParameter('video_rating'));
    $videos->setVotes($this->getRequestParameter('vote'));
    $videos->setTitle($this->getRequestParameter('title'));
    $videos->setApproved($this->getRequestParameter('approved'));
    $videos->setVideosRawIp($this->getRequestParameter('video_raw_ip'));

    $videos->save();

    return $this->redirect('videos/show?id='.$videos->getId());
  }

  public function executeDelete()
  {
    $videos = VideosPeer::retrieveByPk($this->getRequestParameter('id'));

    $this->forward404Unless($videos);

    $videos->delete();
	
	//delete file from hard disk
	$this->uploadDirName='/uploads/assets';
    $this->uploadDir     = sfConfig::get('sf_web_dir').$this->uploadDirName;
	$videos_imageFile = $this->uploadDir.'/videos/'.$photo->getFilename();
	unlink($videos_imageFile);
	$this->useThumbnails = true;
    $this->thumbnailsDir = sfConfig::get('app_sfMediaLibrary_thumbnails_dir', 'thumbnail');
	if ($this->useThumbnails)
    {
       $itemThumbnailFile = $this->uploadDir.'/videos/'.$this->thumbnailsDir.'/'.$videos->getFilename();
       if (is_readable($itemThumbnailFile))
       {
           unlink($itemThumbnailFile);
       }
    }		
	//

    return $this->redirect('videos/list');
  }
  
  public function executeAllvideos(sfWebRequest $request)
  {
     $this->subscriber = sfGuardUserPeer::retrieveByUsername($this->getRequestParameter('username'));
     $this->forward404Unless($this->subscriber);
     //id of a user whose album are retrived
	 $this->username_user_id=$this->subscriber->getId();
	 $this->user_id=$this->getUser()->getAttribute('user_id', '', 'sfGuardSecurityUser');      
     $this->videos_pager = VideoPeer::getAllVideosPager($this->getRequestParameter('page', 1), $this->username_user_id);		
  }
  
   public function executeAllfavvideos()
  { 
    $this->subscriber = sfGuardUserPeer::retrieveByUsername($this->getRequestParameter('username'));
    $this->forward404Unless($this->subscriber);
	//id of a user whose album are retrived
	$this->username_user_id=$this->subscriber->getId();
	$this->user_id=$this->getUser()->getAttribute('user_id', '', 'sfGuardSecurityUser');  
	$this->videos_pager = YtvideoFavPeer::getAllFavYtvideosPager($this->getRequestParameter('page', 1), $this->username_user_id);
	
  }
   public function executeRemovefavytvideo(sfWebRequest $request)
  {
    $this->video_id = $request->getParameter('video_id');
    $this->forward404Unless($this->video_id);
    $this->user_id=$this->getUser()->getAttribute('user_id', '', 'sfGuardSecurityUser');
    YtvideoFavPeer::removeFavVideo($this->user_id, $this->video_id);
	$this->subscriber = sfGuardUserPeer::retrieveByUsername($this->getRequestParameter('username'));
    $this->username_user_id=$this->subscriber->getId();
	$this->user_id=$this->getUser()->getAttribute('user_id', '', 'sfGuardSecurityUser');  
	$this->videos_pager = YtvideoFavPeer::getAllFavYtvideosPager($this->getRequestParameter('page', 1), $this->username_user_id);
  }   
}
